(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>l});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Poppins&display=swap);"]),i.push([n.id,"body {\n    margin: 0;\n    color: black;\n    font-size: 16px;\n    font-family: 'Poppins', sans-serif;\n}\n\nh1, h2, button {\n    font-family: 'Bebas Neue', cursive;\n}\n\nh3, p {\n    font-family: 'Poppins', sans-serif;\n}\n\n.container {\n    max-width: 900px;\n    margin: auto;\n}\n\nheader,\nfooter {\n    background-color: #ED1C24;\n    padding: 1rem;\n    color: #FFFFFF;\n}\n\narticle {\n    padding: 1rem;\n}\n\nheader .container,\nfooter .container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n}\n\n.menu-item {\n    margin-top: 2px;\n    background-color: transparent;\n    padding: 0;\n    border: 0;\n    border-top: 2px solid transparent;\n    border-bottom: 2px solid transparent;\n    margin-right: 0.5rem;\n    color: #FFFFFF;\n    font-size: 1.5rem;\n    cursor: pointer;\n}\n\n.menu-item:hover {\n    border-color: #FFFFFF;\n}\n\n.menu-item.active {\n    border-color: #FFFFFF;\n}\n\n.image-text {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n}\n.img-wrapper {\n    margin: 1rem 0;\n}\n@media screen and (min-width: 600px) {\n    .image-text .shrink {\n        flex: 1;\n    }\n    .img-wrapper {\n        margin-left: 1rem;\n    }\n}\n\n.img-wrapper img {\n    width: 100%;\n    height: auto;\n\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,YAAY;IACZ,eAAe;IACf,kCAAkC;AACtC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,gBAAgB;IAChB,YAAY;AAChB;;AAEA;;IAEI,yBAAyB;IACzB,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;;AAEvB;;AAEA;IACI,eAAe;IACf,6BAA6B;IAC7B,UAAU;IACV,SAAS;IACT,iCAAiC;IACjC,oCAAoC;IACpC,oBAAoB;IACpB,cAAc;IACd,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;AACnB;AACA;IACI,cAAc;AAClB;AACA;IACI;QACI,OAAO;IACX;IACA;QACI,iBAAiB;IACrB;AACJ;;AAEA;IACI,WAAW;IACX,YAAY;;AAEhB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Poppins&display=swap');\n\nbody {\n    margin: 0;\n    color: black;\n    font-size: 16px;\n    font-family: 'Poppins', sans-serif;\n}\n\nh1, h2, button {\n    font-family: 'Bebas Neue', cursive;\n}\n\nh3, p {\n    font-family: 'Poppins', sans-serif;\n}\n\n.container {\n    max-width: 900px;\n    margin: auto;\n}\n\nheader,\nfooter {\n    background-color: #ED1C24;\n    padding: 1rem;\n    color: #FFFFFF;\n}\n\narticle {\n    padding: 1rem;\n}\n\nheader .container,\nfooter .container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n}\n\n.menu-item {\n    margin-top: 2px;\n    background-color: transparent;\n    padding: 0;\n    border: 0;\n    border-top: 2px solid transparent;\n    border-bottom: 2px solid transparent;\n    margin-right: 0.5rem;\n    color: #FFFFFF;\n    font-size: 1.5rem;\n    cursor: pointer;\n}\n\n.menu-item:hover {\n    border-color: #FFFFFF;\n}\n\n.menu-item.active {\n    border-color: #FFFFFF;\n}\n\n.image-text {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n}\n.img-wrapper {\n    margin: 1rem 0;\n}\n@media screen and (min-width: 600px) {\n    .image-text .shrink {\n        flex: 1;\n    }\n    .img-wrapper {\n        margin-left: 1rem;\n    }\n}\n\n.img-wrapper img {\n    width: 100%;\n    height: auto;\n\n}"],sourceRoot:""}]);const l=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var u=[].concat(n[c]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],l=0;l<n.length;l++){var s=n[l],c=r.base?s[0]+r.base:s[0],u=a[c]||0,A="".concat(c," ").concat(u);a[c]=u+1;var p=t(A),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(d);else{var m=o(d,r);r.byIndex=l,e.splice(l,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var l=t(a[i]);e[l].references--}for(var s=r(n,o),c=0;c<a.length;c++){var u=t(a[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{function n(n,e,t,r){let o=document.createElement(n);return e&&(o.id=e),t&&Array.isArray(t)&&o.classList.add(...t),r&&(o.innerText=r),o}function e(n){n.reverse();for(let e=0;e<n.length-1;e++)e+1!==n.length&&Array.isArray(n[e])?r(n[e+1],n[e]):n[e+1].appendChild(n[e])}function r(n,e){e.forEach((e=>{n.appendChild(e)}))}const o=function(){const t=n("article","bodyAbout",["container"],null),o=n("h2",null,["image-text__title"],"Our story"),a=n("p",null,["shrink"],"Brothers Omar (who's childhood nickname was \"Slim\") and Yunes grew up with a respect for hard work, and an appreciation for the value of fresh ingredients having both spent many hours working in their father's grocery as teenagers. They carried their strong work ethic and the appreciation of fresh food with them and, in 2011, opened pizza place in New Hope, MN. It wasn't long, however, before they decided to expand both menu and venue. In February of 2013, the brothers moved back to their roots and opened Slim's on busy and bustling Brooklyn Boulevard in Brooklyn Center, where it's still about the basics: hard work and fresh food."),i=n("div",null,["img-wrapper","shrink"],null),l=new Image;l.src="./images/about-burgers.jpg",e([i,l]);const s=n("div",null,["image-text"],null);return r(s,[a,i]),r(t,[o,s]),t};var a=t(379),i=t.n(a),l=t(795),s=t.n(l),c=t(569),u=t.n(c),A=t(565),p=t.n(A),d=t(216),m=t.n(d),f=t(589),h=t.n(f),g=t(426),C={};C.styleTagTransform=h(),C.setAttributes=p(),C.insert=u().bind(null,"head"),C.domAPI=s(),C.insertStyleElement=m(),i()(g.Z,C),g.Z&&g.Z.locals&&g.Z.locals;const b=document.getElementById("content");let v=[function(){const t=n("header",null,null,null),o=n("div",null,["container"],null),a=n("h1",null,["title","large"],"Slim's Burgers"),i=n("menu");let l=[],s=!0;return["About","Menu","Contact"].forEach((e=>{let t=n("button",`btn${e}`,s?["menu-item","active"]:["menu-item"],e);l.push(t),s=!1})),r(i,l),e([t,o,[a,i]]),t}(),o(),function(){const t=n("footer",null,null,null),o=n("div",null,["container"],null),a=n("h2",null,["title","large"],"Slim's Burgers");let i=new Date;i=i.getFullYear();const l=n("div",null,["footer-info"],null);return r(l,[n("p",null,null,`Â© ${i} Brychan Morris-Dafydd`)]),e([t,o,[a,l]]),t}()];r(b,v),document.querySelectorAll(".menu-item").forEach((t=>{t.addEventListener("click",(t=>{let a,i;switch(t.target.id){case"btnMenu":a=document.querySelector("article"),i=function(){const t=n("article",null,["container"],null),o=n("h2",null,["image-text__title"],"Our story"),a=n("p",null,["shrink"],"Something different"),i=n("div",null,["img-wrapper","shrink"],null),l=new Image;l.src="./images/about-burgers.jpg",e([i,l]);const s=n("div",null,["image-text"],null);return r(s,[a,i]),r(t,[o,s]),t}(),b.replaceChild(i,a);break;case"btnContact":a=document.querySelector("article"),i=function(){const t=n("article",null,["container"],null),o=n("h2",null,["image-text__title"],"Our story"),a=n("p",null,["shrink"],"Something about contact me"),i=n("div",null,["img-wrapper","shrink"],null),l=new Image;l.src="./images/about-burgers.jpg",e([i,l]);const s=n("div",null,["image-text"],null);return r(s,[a,i]),r(t,[o,s]),t}(),b.replaceChild(i,a);break;case"btnAbout":a=document.querySelector("article"),i=o(),b.replaceChild(i,a);break;default:console.log("oops something went wrong!")}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,