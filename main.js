(()=>{"use strict";var n={426:(n,e,r)=>{r.d(e,{Z:()=>s});var t=r(537),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Poppins&display=swap);"]),i.push([n.id,"body {\n    margin: 0;\n    color: black;\n    font-size: 16px;\n    font-family: 'Poppins', sans-serif;\n}\n\nh1, h2, button {\n    font-family: 'Bebas Neue', cursive;\n}\n\nh3, p {\n    font-family: 'Poppins', sans-serif;\n}\n\n.container {\n    max-width: 900px;\n    margin: auto;\n}\n\nheader,\nfooter {\n    background-color: #ED1C24;\n    padding: 1rem;\n    color: #FFFFFF;\n}\n\narticle {\n    padding: 1rem;\n}\n\nheader .container,\nfooter .container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n}\n\nbutton {\n    margin-top: 2px;\n    background-color: transparent;\n    padding: 0;\n    border: 0;\n    border-top: 2px solid transparent;\n    border-bottom: 2px solid transparent;\n    margin-right: 0.5rem;\n    color: #FFFFFF;\n    font-size: 1.5rem;\n}\n\nbutton:hover {\n    border-color: #FFFFFF;\n}\n\nbutton.active {\n    border-color: #FFFFFF;\n}\n\n.image-text {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n}\n.img-wrapper {\n    margin: 1rem 0;\n}\n@media screen and (min-width: 600px) {\n    .image-text .shrink {\n        flex: 1;\n    }\n    .img-wrapper {\n        margin-left: 1rem;\n    }\n}\n\n.img-wrapper img {\n    width: 100%;\n    height: auto;\n\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,YAAY;IACZ,eAAe;IACf,kCAAkC;AACtC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,gBAAgB;IAChB,YAAY;AAChB;;AAEA;;IAEI,yBAAyB;IACzB,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;;AAEvB;;AAEA;IACI,eAAe;IACf,6BAA6B;IAC7B,UAAU;IACV,SAAS;IACT,iCAAiC;IACjC,oCAAoC;IACpC,oBAAoB;IACpB,cAAc;IACd,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;AACnB;AACA;IACI,cAAc;AAClB;AACA;IACI;QACI,OAAO;IACX;IACA;QACI,iBAAiB;IACrB;AACJ;;AAEA;IACI,WAAW;IACX,YAAY;;AAEhB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Poppins&display=swap');\n\nbody {\n    margin: 0;\n    color: black;\n    font-size: 16px;\n    font-family: 'Poppins', sans-serif;\n}\n\nh1, h2, button {\n    font-family: 'Bebas Neue', cursive;\n}\n\nh3, p {\n    font-family: 'Poppins', sans-serif;\n}\n\n.container {\n    max-width: 900px;\n    margin: auto;\n}\n\nheader,\nfooter {\n    background-color: #ED1C24;\n    padding: 1rem;\n    color: #FFFFFF;\n}\n\narticle {\n    padding: 1rem;\n}\n\nheader .container,\nfooter .container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n}\n\nbutton {\n    margin-top: 2px;\n    background-color: transparent;\n    padding: 0;\n    border: 0;\n    border-top: 2px solid transparent;\n    border-bottom: 2px solid transparent;\n    margin-right: 0.5rem;\n    color: #FFFFFF;\n    font-size: 1.5rem;\n}\n\nbutton:hover {\n    border-color: #FFFFFF;\n}\n\nbutton.active {\n    border-color: #FFFFFF;\n}\n\n.image-text {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n}\n.img-wrapper {\n    margin: 1rem 0;\n}\n@media screen and (min-width: 600px) {\n    .image-text .shrink {\n        flex: 1;\n    }\n    .img-wrapper {\n        margin-left: 1rem;\n    }\n}\n\n.img-wrapper img {\n    width: 100%;\n    height: auto;\n\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);t&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),r&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=r):A[2]=r),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=t.base?c[0]+t.base:c[0],A=a[l]||0,p="".concat(l," ").concat(A);a[l]=A+1;var u=r(p),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(d);else{var f=o(d,t);t.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=r(a[i]);e[s].references--}for(var c=t(n,o),l=0;l<a.length;l++){var A=r(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=c}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var a=e[t]={id:t,exports:{}};return n[t](a,a.exports,r),a.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{function n(n,e,r,t){let o=document.createElement(n);return e&&(o.id=e),r&&Array.isArray(r)&&o.classList.add(...r),t&&(o.innerText=t),o}function e(n){n.reverse();for(let e=0;e<n.length-1;e++)e+1!==n.length&&Array.isArray(n[e])?t(n[e+1],n[e]):n[e+1].appendChild(n[e])}function t(n,e){e.forEach((e=>{n.appendChild(e)}))}var o=r(379),a=r.n(o),i=r(795),s=r.n(i),c=r(569),l=r.n(c),A=r(565),p=r.n(A),u=r(216),d=r.n(u),f=r(589),m=r.n(f),h=r(426),g={};g.styleTagTransform=m(),g.setAttributes=p(),g.insert=l().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=d(),a()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;const C=document.getElementById("content");C.appendChild(function(){const r=n("header",null,null,null),o=n("div",null,["container"],null),a=n("h1",null,["title","large"],"Slim's Burgers"),i=n("menu");let s=[],c=!0;return["About","Menu","Contact"].forEach((e=>{let r=n("button",`btn${e}`,c?["active"]:null,e);s.push(r),c=!1})),t(i,s),e([r,o,[a,i]]),r}()),C.appendChild(function(){const r=n("article",null,["container"],null),o=n("h2",null,["image-text__title"],"Our story"),a=n("p",null,["shrink"],"Brothers Omar (who's childhood nickname was \"Slim\") and Yunes grew up with a respect for hard work, and an appreciation for the value of fresh ingredients having both spent many hours working in their father's grocery as teenagers. They carried their strong work ethic and the appreciation of fresh food with them and, in 2011, opened pizza place in New Hope, MN. It wasn't long, however, before they decided to expand both menu and venue. In February of 2013, the brothers moved back to their roots and opened Slim's on busy and bustling Brooklyn Boulevard in Brooklyn Center, where it's still about the basics: hard work and fresh food."),i=n("div",null,["img-wrapper","shrink"],null),s=new Image;s.src="./images/about-burgers.jpg",e([i,s]);const c=n("div",null,["image-text"],null);return t(c,[a,i]),t(r,[o,c]),r}()),C.appendChild(function(){const r=n("footer",null,null,null),o=n("div",null,["container"],null),a=n("h2",null,["title","large"],"Slim's Burgers"),i=n("div",null,["footer-info"],null);return t(i,[n("p",null,null,"Â© 2022 Brychan Morris-Dafydd")]),e([r,o,[a,i]]),r}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,